(self.webpackChunk=self.webpackChunk||[]).push([[5818],{89403:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return C}});var s=n(26729),i=n.n(s),c=n(46160),o=n(96641),r=n(44448),h=n(71516),d=n(4337),a=n.n(d);class u{}class l extends u{constructor(t){super()}}const g="INTERNAL_ERROR",v="SERVER_ERROR",p=[-32700,-32600,-32601,-32602,-32603],w={PARSE_ERROR:{code:-32700,message:"Parse error"},INVALID_REQUEST:{code:-32600,message:"Invalid Request"},METHOD_NOT_FOUND:{code:-32601,message:"Method not found"},INVALID_PARAMS:{code:-32602,message:"Invalid params"},[g]:{code:-32603,message:"Internal error"},[v]:{code:-32e3,message:"Server error"}},m=v;function I(t){return p.includes(t)}function f(t){return Object.keys(w).includes(t)?w[t]:w[m]}function R(t){const e=Object.values(w).find((e=>e.code===t));return e||w[m]}n(1468);function q(t,e,n){return{id:t,jsonrpc:"2.0",error:E(e,n)}}function E(t,e){return void 0===t?f(g):("string"==typeof t&&(t=Object.assign(Object.assign({},f(v)),{message:t})),void 0!==e&&(t.data=e),I(t.code)&&(t=R(t.code)),t)}class O extends l{constructor(t){super(),this.events=new(i()),this.accounts=[],this.chainId=1,this.pending=!1,this.bridge="https://bridge.walletconnect.org",this.qrcode=!0,this.qrcodeModalOptions=void 0,this.opts=t,this.chainId=(null==t?void 0:t.chainId)||this.chainId,this.wc=this.register(t)}get connected(){return void 0!==this.wc&&this.wc.connected}get connecting(){return this.pending}get connector(){return this.wc=this.register(this.opts),this.wc}on(t,e){this.events.on(t,e)}once(t,e){this.events.once(t,e)}off(t,e){this.events.off(t,e)}removeListener(t,e){this.events.removeListener(t,e)}async open(t){if(!this.connected)return new Promise(((e,n)=>{this.on("error",(t=>{n(t)})),this.on("open",(()=>{e()})),this.create(t)}));this.onOpen()}async close(){void 0!==this.wc&&(this.wc.connected&&this.wc.killSession(),this.onClose())}async send(t){this.wc=this.register(this.opts),this.connected||await this.open(),this.sendPayload(t).then((t=>this.events.emit("payload",t))).catch((e=>this.events.emit("payload",q(t.id,e.message))))}register(t){if(this.wc)return this.wc;this.opts=t||this.opts,this.bridge=(null==t?void 0:t.connector)?t.connector.bridge:(null==t?void 0:t.bridge)||"https://bridge.walletconnect.org",this.qrcode=void 0===(null==t?void 0:t.qrcode)||!1!==t.qrcode,this.chainId=void 0!==(null==t?void 0:t.chainId)?t.chainId:this.chainId,this.qrcodeModalOptions=null==t?void 0:t.qrcodeModalOptions;const e={bridge:this.bridge,qrcodeModal:this.qrcode?a():void 0,qrcodeModalOptions:this.qrcodeModalOptions,storageId:null==t?void 0:t.storageId,signingMethods:null==t?void 0:t.signingMethods,clientMeta:null==t?void 0:t.clientMeta};if(this.wc=void 0!==(null==t?void 0:t.connector)?t.connector:new h.Z(e),void 0===this.wc)throw new Error("Failed to register WalletConnect connector");return this.wc.accounts.length&&(this.accounts=this.wc.accounts),this.wc.chainId&&(this.chainId=this.wc.chainId),this.registerConnectorEvents(),this.wc}onOpen(t){this.pending=!1,t&&(this.wc=t),this.events.emit("open")}onClose(){this.pending=!1,this.wc&&(this.wc=void 0),this.events.emit("close")}onError(t,e="Failed or Rejected Request",n=-32e3,s){const i={id:t.id,jsonrpc:t.jsonrpc,error:{code:n,message:e}};return void 0!==s&&(i.error.data=s),this.events.emit("payload",i),i}create(t){this.wc=this.register(this.opts),this.chainId=t||this.chainId,this.connected||this.pending||(this.pending=!0,this.registerConnectorEvents(),this.wc.createSession({chainId:this.chainId}).then((()=>this.events.emit("created"))).catch((t=>this.events.emit("error",t))))}registerConnectorEvents(){this.wc=this.register(this.opts),this.wc.on("connect",(t=>{var e,n;t?this.events.emit("error",t):(this.accounts=(null===(e=this.wc)||void 0===e?void 0:e.accounts)||[],this.chainId=(null===(n=this.wc)||void 0===n?void 0:n.chainId)||this.chainId,this.onOpen())})),this.wc.on("disconnect",(t=>{t?this.events.emit("error",t):this.onClose()})),this.wc.on("modal_closed",(()=>{this.events.emit("error",new Error("User closed modal"))})),this.wc.on("session_update",((t,e)=>{const{accounts:n,chainId:s}=e.params[0];(!this.accounts||n&&this.accounts!==n)&&(this.accounts=n,this.events.emit("accountsChanged",n)),(!this.chainId||s&&this.chainId!==s)&&(this.chainId=s,this.events.emit("chainChanged",s))}))}async sendPayload(t){this.wc=this.register(this.opts);try{const e=await this.wc.unsafeSend(t);return this.sanitizeResponse(e)}catch(e){return this.onError(t,e.message)}}sanitizeResponse(t){return void 0!==t.error&&void 0===t.error.code?q(t.id,t.error.message,t.error.data):t}}var C=class{constructor(t){this.events=new(i()),this.rpc={infuraId:null==t?void 0:t.infuraId,custom:null==t?void 0:t.rpc},this.signer=new c.r(new O(t));const e=this.signer.connection.chainId||(null==t?void 0:t.chainId)||1;this.http=this.setHttpProvider(e),this.registerEventListeners()}get connected(){return this.signer.connection.connected}get connector(){return this.signer.connection.connector}get accounts(){return this.signer.connection.accounts}get chainId(){return this.signer.connection.chainId}get rpcUrl(){var t;return(null===(t=this.http)||void 0===t?void 0:t.connection).url||""}async request(t){switch(t.method){case"eth_requestAccounts":return await this.connect(),this.signer.connection.accounts;case"eth_accounts":return this.signer.connection.accounts;case"eth_chainId":return this.signer.connection.chainId}if(r.V7.includes(t.method))return this.signer.request(t);if(void 0===this.http)throw new Error(`Cannot request JSON-RPC method (${t.method}) without provided rpc url`);return this.http.request(t)}sendAsync(t,e){this.request(t).then((t=>e(null,t))).catch((t=>e(t,void 0)))}async enable(){return await this.request({method:"eth_requestAccounts"})}async connect(){this.signer.connection.connected||await this.signer.connect()}async disconnect(){this.signer.connection.connected&&await this.signer.disconnect()}on(t,e){this.events.on(t,e)}once(t,e){this.events.once(t,e)}removeListener(t,e){this.events.removeListener(t,e)}off(t,e){this.events.off(t,e)}get isWalletConnect(){return!0}registerEventListeners(){this.signer.connection.on("accountsChanged",(t=>{this.events.emit("accountsChanged",t)})),this.signer.connection.on("chainChanged",(t=>{this.http=this.setHttpProvider(t),this.events.emit("chainChanged",t)})),this.signer.on("disconnect",(()=>{this.events.emit("disconnect")}))}setHttpProvider(t){const e=(0,r.RM)(t,this.rpc);if(void 0===e)return;return new c.r(new o.k(e))}}},36563:function(){}}]);